rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasValidFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidTimestamp(field) {
      return request.resource.data[field] is timestamp;
    }
    
    function isValidUser() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow write: if isSignedIn() && isOwner(userId);
    }
    
    // Tasks
    match /tasks/{taskId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.userId)
        && hasValidFields(['title', 'userId'])
        && isValidTimestamp('createdAt');
      allow update: if isSignedIn() 
        && isOwner(resource.data.userId)
        && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Notes
    match /notes/{noteId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.userId)
        && hasValidFields(['title', 'content', 'userId'])
        && isValidTimestamp('createdAt')
        && isValidTimestamp('updatedAt');
      allow update: if isSignedIn() 
        && isOwner(resource.data.userId)
        && isOwner(request.resource.data.userId)
        && isValidTimestamp('updatedAt');
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Note Categories
    match /noteCategories/{categoryId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.userId)
        && hasValidFields(['name', 'userId'])
        && isValidTimestamp('createdAt');
      allow update: if isSignedIn() 
        && isOwner(resource.data.userId)
        && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Todos
    match /todos/{todoId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Events/Calendar
    match /events/{eventId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.userId)
        && hasValidFields(['title', 'start', 'end', 'userId']);
      allow update: if isSignedIn() 
        && isOwner(resource.data.userId)
        && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Progress Tracker (Goals)
    match /goals/{goalId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.userId)
        && hasValidFields(['title', 'userId'])
        && isValidTimestamp('createdAt');
      allow update: if isSignedIn() 
        && isOwner(resource.data.userId)
        && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Progress Updates
    match /progressUpdates/{updateId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Finance Tracker - Transactions
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.userId)
        && hasValidFields(['amount', 'type', 'date', 'userId']);
      allow update: if isSignedIn() 
        && isOwner(resource.data.userId)
        && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Finance Tracker - Budgets
    match /budgets/{budgetId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() 
        && isOwner(request.resource.data.userId)
        && hasValidFields(['amount', 'category', 'month', 'userId']);
      allow update: if isSignedIn() 
        && isOwner(resource.data.userId)
        && isOwner(request.resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Remaining collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}